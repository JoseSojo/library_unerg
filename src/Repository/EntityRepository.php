<?php

namespace App\Repository;

use ReflectionClass;
use App\Interfaces\Core\EnvironmentInterface;

/**
 * EntityRepository
 *
 * @author Máximo Sojo <maxsojo13@gmail.com>
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EntityRepository extends \Maximosojo\ToolsBundle\ORM\EntityRepository
{
    // public function __construct(\Doctrine\ORM\EntityManagerInterface $em, \Doctrine\ORM\Mapping\ClassMetadata $class, private \Symfony\Component\Security\Core\Authorization\AuthorizationChecker $authorizationChecker)
    // {
    //     parent::__construct($em, $class);
    // }
    /**
     * Retorna una consulta con los elementos activos
     * @return \Doctrine\ORM\QueryBuilder
     */
    function getQueryAllActives(\Doctrine\ORM\QueryBuilder $qb = null)
    {
        $a = $this->getAlias();
        if ($qb === null) {
            $qb = $this->getQueryBuilder();
        }
        $qb
                ->andWhere($a.".enabled = :enabled")
                ->setParameter("enabled", true)
        ;

        $reflectionClass = new ReflectionClass($this->_entityName);
        if ($reflectionClass->hasMethod("getItemEnvironment")) {
            //Por defecto se permiten los que estan en productivo
            $envsAllowed = [
                EnvironmentInterface::ENV_PRODUCTIVE,
            ];
            if ($this->isGranted("ROLE_APP_ENV_DEVELOPMENT")) {
                $envsAllowed[] = EnvironmentInterface::ENV_DEVELOPMENT;
            }
            if ($this->isGranted("ROLE_APP_ENV_QUALITY")) {
                $envsAllowed[] = EnvironmentInterface::ENV_QUALITY;
            }
            $qb
                ->andWhere($qb->expr()->orX($qb->expr()->in($a.".itemEnvironment", $envsAllowed),
                        $qb->expr()->isNull($a.".itemEnvironment") 
                        ))
                ;
        }

        return $qb;
    }

	/**
     * Paginador 
     * 
     * @author Máximo Sojo <maxsojo13@gmail.com>
     * @param  array
     * @param  array
     * @return Paginator
     */
    public function createPaginator(array $criteria = array(),array $order = array())
    {
        $criteria = $this->parseCriteria($criteria);
        
        $a = $this->getAlias();
        $queryBuilder = $this->createQueryBuilder($a);
        $this->applySorting($queryBuilder, $order);
        
        return $this->getPaginator($queryBuilder);
    }

    /**
     * Checks if the attributes are granted against the current authentication token and optionally supplied subject.
     *
     * @param mixed $attributes The attributes
     * @param mixed $subject    The subject
     *
     * @return bool
     *
     * @throws \LogicException
     *
     * @final since version 3.4
     */
    protected function isGranted($attributes, $subject = null)
    {
        if (!$this->container->has('security.authorization_checker')) {
            throw new \LogicException('The SecurityBundle is not registered in your application. Try running "composer require symfony/security-bundle".');
        }

        return $this->authorizationChecker->isGranted($attributes, $subject);
    }

    public function parseAndCleanCriteria(array $criteria = array())
    {
        $newCriteria = [];
        unset($criteria["_token"]);
        foreach ($criteria as $key => $value) {
            if (empty($value)) {
                continue;
            } elseif (is_array($value)) {
                if (isset($value[0]) && empty($value[0])) {
                    continue;   
                }
            }

            $newCriteria[$key] = $value;
        }

        return $this->parseCriteria($newCriteria);
    }
}
