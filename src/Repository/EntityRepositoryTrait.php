<?php

namespace App\Repository;

use ReflectionClass;
use App\Interfaces\Core\EnvironmentInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

/**
 * EntityRepositoryTrait
 *
 * @author Máximo Sojo <maxsojo13@gmail.com>
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
trait EntityRepositoryTrait
{
    /**
     * Retorna una consulta con los elementos activos
     * @return \Doctrine\ORM\QueryBuilder
     */
    function getQueryAllActives(\Doctrine\ORM\QueryBuilder $qb = null)
    {
        $a = $this->getAlias();
        if ($qb === null) {
            $qb = $this->getQueryBuilder();
        }
        $qb
                ->andWhere($a.".enabled = :enabled")
                ->setParameter("enabled", true)
        ;

        // $reflectionClass = new ReflectionClass($this->_entityName);
        // if ($reflectionClass->hasMethod("getItemEnvironment")) {
        //     //Por defecto se permiten los que estan en productivo
        //     $envsAllowed = [
        //         EnvironmentInterface::ENV_PRODUCTIVE,
        //     ];
        //     if ($this->isGranted("ROLE_APP_ENV_DEVELOPMENT")) {
        //         $envsAllowed[] = EnvironmentInterface::ENV_DEVELOPMENT;
        //     }
        //     if ($this->isGranted("ROLE_APP_ENV_QUALITY")) {
        //         $envsAllowed[] = EnvironmentInterface::ENV_QUALITY;
        //     }
        //     $qb
        //         ->andWhere($qb->expr()->orX($qb->expr()->in($a.".itemEnvironment", $envsAllowed),
        //                 $qb->expr()->isNull($a.".itemEnvironment") 
        //                 ))
        //         ;
        // }

        return $qb;
    }

	/**
     * Paginador 
     * 
     * @author Máximo Sojo <maxsojo13@gmail.com>
     * @param  array
     * @param  array
     * @return Paginator
     */
    public function createPaginator(array $criteria = array(),array $order = array())
    {
        $criteria = $this->parseCriteria($criteria);
        
        $a = $this->getAlias();
        $queryBuilder = $this->createQueryBuilder($a);
        $this->applySorting($queryBuilder, $order);
        
        return $this->getPaginator($queryBuilder);
    }

    public function parseAndCleanCriteria(array $criteria = array())
    {
        $newCriteria = [];
        unset($criteria["_token"]);
        foreach ($criteria as $key => $value) {
            if (empty($value)) {
                continue;
            } elseif (is_array($value)) {
                if (isset($value[0]) && empty($value[0])) {
                    continue;   
                }
            }

            $newCriteria[$key] = $value;
        }

        return $this->parseCriteria($newCriteria);
    }

    /**
     * Busca un registro o genera un 404
     *
     * @param   Request  $request
     * @param   string   $property
     *
     * @return  $resource
     */
    public function findOr404(Request $request,$property = "id") 
    {
        $id = $request->get($property);
        if(empty($id)){
            throw $this->createNotFoundException("The identifier can not be empty.");
        }

        $resource = $this->find($id);
        
        if(!$resource){
            throw $this->createNotFoundException();
        }
        
        return $resource;
    }

    /**
     * Returns a NotFoundHttpException.
     *
     * This will result in a 404 response code. Usage example:
     *
     *     throw $this->createNotFoundException('Page not found!');
     */
    protected function createNotFoundException(string $message = 'Not Found', \Throwable $previous = null): NotFoundHttpException
    {
        return new NotFoundHttpException($message, $previous);
    }
}
