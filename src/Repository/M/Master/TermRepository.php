<?php

namespace App\Repository\M\Master;

use Doctrine\Persistence\ManagerRegistry;
use App\Repository\ServiceEntityRepository;
use App\Entity\M\Master\Term;

/**
 * TermRepository
 *
 * @author Máximo Sojo <maxsojo13@gmail.com>
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TermRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Term::class);
    }

    /**
     * Devuelve las monedas activas
     * @return type
     */
    public function getQueryForCriteria(array $criteria = array(), array $order = array())
    {
        $criteria = $this->parseCriteria($criteria);
        
        $a = $this->getAlias();
        $qb = $this->getQueryAllActives();

        if(($taxonomy = $criteria->remove("taxonomy")) != null){
            $qb
                ->andWhere($a.".taxonomy = :taxonomy")
                ->setParameter("taxonomy", $taxonomy)
                ;            
        }

        $this->applySorting($qb, $order);

        return $qb;
    }
    
	/**
     * Paginador de usuarios 
     * 
     * @author Máximo Sojo <maxsojo13@gmail.com>
     * @param  array
     * @param  array
     * @return Paginator
     */
    public function createPaginator(array $criteria = array(),array $order = array())
    {
        $criteria = $this->parseCriteria($criteria);
        
        $a = $this->getAlias();
        $qb = $this->createQueryBuilder($a);
		
        if(($taxonomy = $criteria->remove("taxonomy")) != null){
            $qb
                ->andWhere($a.".taxonomy = :taxonomy")
                ->setParameter("taxonomy", $taxonomy)
                ;            
        }

        if (($parent = $criteria->remove("parent")) != null) {            
            $qb
                ->innerjoin($a.".parents",$a."_p")
                ->andWhere($a."_p.id = :parent")
                ->setParameter("parent", $parent)
                ;
        }

		$sqb = $this->createSearchQueryBuilder($qb, $criteria);
        $sqb
            ->addFieldLike(["name"])
			;
			
        $this->applySorting($qb, $order);
        
        return $this->getPaginator($qb);
	}
	
	/**
	 * Alias
	 *  
	 * @author Máximo Sojo <maxsojo13@gmail.com>
	 * @return Alies
	 */
    public function getAlias()
    {
        return "mt";
    }
}
