<?php

namespace App\Repository\M\User;

use DateTime;
use Doctrine\Persistence\ManagerRegistry;
use App\Repository\ServiceEntityRepository;
use App\Entity\M\User\Notification;

/**
 * NotificationRepository
 *
 * @author Máximo Sojo <maxsojo13@gmail.com>
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NotificationRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Notification::class);
    }

    /**
     * Busca un paginador con las notificaciones leidas antiguas al tiempo que pase
     * @param DateTime $date
     * @return type
     */
    public function findPaginatorReadForClean(DateTime $date, $status)
    {
        $a = $this->getAlias();
        $qb = $this->getQueryBuilder();
        $qb
                ->andWhere($a.".createdAt <= :date")
                ->andWhere($a.".status = :status")
                ->setParameter("status", $status)
                ->setParameter("date", $date)
                ->orderBy($a.".createdAt", "ASC")
        ;
        return $this->getPaginator($qb);
    }

	/**
     * Paginador de usuarios 
     * 
     * @author Máximo Sojo <maxsojo13@gmail.com>
     * @param  array
     * @param  array
     * @return Paginator
     */
    public function createPaginator(array $criteria = array(),array $order = array())
    {
        $criteria = $this->parseCriteria($criteria);
        
        $a = $this->getAlias();
        $qb = $this->createQueryBuilder($a);
        
        if(($user = $criteria->remove("user")) !== null){
            $qb
                ->andWhere($a.".user = :user")
                ->setParameter("user", $user)
                ;
        }

        if(($status = $criteria->remove("status")) !== null){
            $qb
                ->andWhere($a.".status = :status")
                ->setParameter("status", $status)
                ;
        }

        $this->applySorting($qb, $order);
        
        return $this->getPaginator($qb);
    }

	/**
	 * Alias
	 *  
	 * @author Máximo Sojo <maxsojo13@gmail.com>
	 * @return Alies
	 */
    public function getAlias()
    {
        return "un";
    }
}
